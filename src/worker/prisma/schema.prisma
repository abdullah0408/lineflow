generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum for Course Status
enum CourseStatus {
  PENDING
  LAYOUT_PROCESSING
  LAYOUT_FAILED
  LAYOUT_SUCCESS
  LAYOUT_APPROVED
  EXTRACTING_CHAPTERS
  EXTRACTING_CHAPTERS_FAILED
  EXTRACTING_CHAPTERS_SUCCESS
  PROCESSING_CHAPTERS
  PROCESSING_CHAPTERS_FAILED
  PROCESSING_CHAPTERS_SUCCESS
}

// Enum for Chapter Status
enum ChapterStatus {
  PENDING
  PROCESSING_CHAPTER
  PROCESSING_CHAPTER_FAILED
  PROCESSING_CHAPTER_SUCCESS
}

model User {
  clerkId      String  @unique
  email        String  @unique
  name         String?
  isSubscribed Boolean @default(false)

  courses Course[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Course {
  status           CourseStatus @default(PENDING) // Uses enum
  id               String       @id @default(cuid())
  title            String
  description      String?
  difficulty       String?
  layout           Json?
  numberOfChapters Int?
  isPublic         Boolean      @default(false)
  isCompleted      Boolean      @default(false)

  userId String
  user   User   @relation(fields: [userId], references: [clerkId], onDelete: Cascade)

  chapters Chapter[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("courses")
}

model Chapter {
  status            ChapterStatus @default(PENDING) // Uses enum
  id                String        @id @default(cuid())
  courseTitle       String
  courseDescription String?
  courseDifficulty  String?
  title             String
  description       String
  chapterNumber     Int
  layout            Json
  content           String?
  isCompleted       Boolean       @default(false)

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("chapters")
}
